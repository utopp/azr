[{"path":"https://pedrobtz.github.io/azr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 azr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://pedrobtz.github.io/azr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Pedro Baltazar. Author, maintainer.","code":""},{"path":"https://pedrobtz.github.io/azr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Baltazar P (2025). azr: Credential Chain Seamless 'OAuth 2.0' Authentication 'Azure Services'. R package version 0.1.0, https://pedrobtz.github.io/azr/.","code":"@Manual{,   title = {azr: Credential Chain for Seamless 'OAuth 2.0' Authentication to 'Azure Services'},   author = {Pedro Baltazar},   year = {2025},   note = {R package version 0.1.0},   url = {https://pedrobtz.github.io/azr/}, }"},{"path":"https://pedrobtz.github.io/azr/index.html","id":"azr","dir":"","previous_headings":"","what":"Credential Chain for Seamless OAuth 2.0 Authentication to Azure Services","title":"Credential Chain for Seamless OAuth 2.0 Authentication to Azure Services","text":"azr implements credential chain seamless OAuth 2.0 authentication Azure services. builds httr2’s OAuth framework provide cache automatic credential discovery, trying different authentication methods sequence one succeeds.","code":""},{"path":"https://pedrobtz.github.io/azr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Credential Chain for Seamless OAuth 2.0 Authentication to Azure Services","text":"can install development version azr GitHub :","code":"# install.packages(\"pak\") pak::pak(\"utopp/azr\")"},{"path":"https://pedrobtz.github.io/azr/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Credential Chain for Seamless OAuth 2.0 Authentication to Azure Services","text":"package supports: Client Secret Credential: Service principal authentication client ID secret Azure CLI Credential: Leverages existing Azure CLI (az) login Authorization Code Flow: Interactive browser-based authentication Device Code Flow: Authentication headless CLI environments interactive development, azr allows browser-based login flows, batch/production mode seamlessly falls back non-interactive methods.","code":""},{"path":"https://pedrobtz.github.io/azr/index.html","id":"related-work","dir":"","previous_headings":"","what":"Related work","title":"Credential Chain for Seamless OAuth 2.0 Authentication to Azure Services","text":"azr inspired Python’s azure-identity library, provides comprehensive coverage Azure authentication scenarios introduced credential chain pattern automatic authentication method discovery. R package AzureAuth (based httr) also provides token acquisition Azure services, offer explicit way define credential chains. becomes important scenarios different authentication methods require different configurations. example: Client Secret Credentials: Using service principal client_id application-specific scope Interactive Credentials: Using user authentication different credentials azr addresses allowing define custom credential chains method-specific configurations, enabling seamless fallback authentication approaches.","code":""},{"path":"https://pedrobtz.github.io/azr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Credential Chain for Seamless OAuth 2.0 Authentication to Azure Services","text":"simplest way authenticate using get_token(), automatically tries different authentication methods one succeeds: Alternatively, use get_request_authorizer() get function adds authentication requests: can customize authentication methods tried order:","code":"library(azr)  # Get a token using the default credential chain token <- get_token(   tenant_id = \"your-tenant-id\",   scope = \"https://management.azure.com/.default\" )  # Use the token with httr2 library(httr2) req <- request(\"https://management.azure.com/subscriptions\") |>   req_auth_bearer_token(token$access_token)  resp <- req_perform(req) library(azr) library(httr2)  # Get a request authorizer for Microsoft Graph API azr_req_auth <- get_request_authorizer(   tenant_id = \"your-tenant-id\",   scope = \"https://graph.microsoft.com/.default\" )  # Use it to authenticate requests resp <- request(\"https://graph.microsoft.com/v1.0/me\") |>   azr_req_auth() |>   req_perform() # Define a custom credential chain with specific credential instances custom_chain <- list(   ClientSecretCredential$new(     scope = Sys.getenv(\"APP_SCOPE\"),     client_id = Sys.getenv(\"APP_CLIENT_ID\"),     client_secret = Sys.getenv(\"APP_CLIENT_SECRET\")   ),   AzureCLICredential )  # Use the custom chain token <- get_token(   tenant_id = \"your-tenant-id\",   scope = \"https://management.azure.com/.default\",   .chain = custom_chain )"},{"path":"https://pedrobtz.github.io/azr/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Credential Chain for Seamless OAuth 2.0 Authentication to Azure Services","text":"Please note azr project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AuthCodeCredential.html","id":null,"dir":"Reference","previous_headings":"","what":"Authorization code credential authentication — AuthCodeCredential","title":"Authorization code credential authentication — AuthCodeCredential","text":"Authenticates user OAuth 2.0 authorization code flow. flow opens web browser user sign .","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AuthCodeCredential.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Authorization code credential authentication — AuthCodeCredential","text":"authorization code flow standard OAuth 2.0 flow interactive authentication. requires web browser suitable applications user can interact browser window. credential supports token caching avoid repeated authentication. Tokens can cached disk memory. redirect URI required OAuth flow complete.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AuthCodeCredential.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Authorization code credential authentication — AuthCodeCredential","text":"azr::Credential -> azr::InteractiveCredential -> AuthCodeCredential","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AuthCodeCredential.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Authorization code credential authentication — AuthCodeCredential","text":"azr::Credential$print() azr::Credential$validate() azr::InteractiveCredential$is_interactive()","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AuthCodeCredential.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Authorization code credential authentication — AuthCodeCredential","text":"AuthCodeCredential$new() AuthCodeCredential$get_token() AuthCodeCredential$req_auth() AuthCodeCredential$clone()","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AuthCodeCredential.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Authorization code credential authentication — AuthCodeCredential","text":"Create new authorization code credential","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AuthCodeCredential.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Authorization code credential authentication — AuthCodeCredential","text":"","code":"AuthCodeCredential$new(   scope = NULL,   tenant_id = NULL,   client_id = NULL,   use_cache = \"disk\",   offline = TRUE,   redirect_uri = default_redirect_uri() )"},{"path":"https://pedrobtz.github.io/azr/reference/AuthCodeCredential.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authorization code credential authentication — AuthCodeCredential","text":"scope character string specifying OAuth2 scope. Defaults NULL. tenant_id character string specifying Azure Active Directory tenant ID. Defaults NULL. client_id character string specifying application (client) ID. Defaults NULL. use_cache character string specifying cache type. Use \"disk\" disk-based caching \"memory\" -memory caching. Defaults \"disk\". offline logical value indicating whether request offline access (refresh tokens). Defaults TRUE. redirect_uri character string specifying redirect URI registered application. Defaults default_redirect_uri().","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AuthCodeCredential.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Authorization code credential authentication — AuthCodeCredential","text":"new AuthCodeCredential object","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AuthCodeCredential.html","id":"method-get-token-","dir":"Reference","previous_headings":"","what":"Method get_token()","title":"Authorization code credential authentication — AuthCodeCredential","text":"Get access token using authorization code flow","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AuthCodeCredential.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Authorization code credential authentication — AuthCodeCredential","text":"","code":"AuthCodeCredential$get_token(reauth = FALSE)"},{"path":"https://pedrobtz.github.io/azr/reference/AuthCodeCredential.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authorization code credential authentication — AuthCodeCredential","text":"reauth logical value indicating whether force reauthentication. Defaults FALSE.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AuthCodeCredential.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Authorization code credential authentication — AuthCodeCredential","text":"httr2::oauth_token() object containing access token","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AuthCodeCredential.html","id":"method-req-auth-","dir":"Reference","previous_headings":"","what":"Method req_auth()","title":"Authorization code credential authentication — AuthCodeCredential","text":"Add OAuth authorization code authentication httr2 request","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AuthCodeCredential.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Authorization code credential authentication — AuthCodeCredential","text":"","code":"AuthCodeCredential$req_auth(req)"},{"path":"https://pedrobtz.github.io/azr/reference/AuthCodeCredential.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authorization code credential authentication — AuthCodeCredential","text":"req httr2::request() object","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AuthCodeCredential.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Authorization code credential authentication — AuthCodeCredential","text":"request object OAuth authorization code authentication configured","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AuthCodeCredential.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Authorization code credential authentication — AuthCodeCredential","text":"objects class cloneable method.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AuthCodeCredential.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Authorization code credential authentication — AuthCodeCredential","text":"","code":"AuthCodeCredential$clone(deep = FALSE)"},{"path":"https://pedrobtz.github.io/azr/reference/AuthCodeCredential.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authorization code credential authentication — AuthCodeCredential","text":"deep Whether make deep clone.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AuthCodeCredential.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Authorization code credential authentication — AuthCodeCredential","text":"","code":"# AuthCodeCredential requires an interactive session if (FALSE) { # \\dontrun{ # Create credential with default settings cred <- AuthCodeCredential$new(   tenant_id = \"your-tenant-id\",   client_id = \"your-client-id\",   scope = \"https://management.azure.com/.default\" )  # Get an access token (will open browser for authentication) token <- cred$get_token()  # Force reauthentication token <- cred$get_token(reauth = TRUE)  # Use with httr2 request req <- httr2::request(\"https://management.azure.com/subscriptions\") req <- cred$req_auth(req) } # }"},{"path":"https://pedrobtz.github.io/azr/reference/AzureCLICredential.html","id":null,"dir":"Reference","previous_headings":"","what":"Azure CLI credential authentication — AzureCLICredential","title":"Azure CLI credential authentication — AzureCLICredential","text":"Authenticates using Azure CLI (az) command-line tool. credential requires Azure CLI installed user logged via az login.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AzureCLICredential.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Azure CLI credential authentication — AzureCLICredential","text":"credential uses az account get-access-token command retrieve access tokens. use currently active Azure CLI account subscription unless specific tenant specified.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AzureCLICredential.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Azure CLI credential authentication — AzureCLICredential","text":"azr::Credential -> AzureCLICredential","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AzureCLICredential.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Azure CLI credential authentication — AzureCLICredential","text":".process_timeout Timeout seconds Azure CLI command execution","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AzureCLICredential.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Azure CLI credential authentication — AzureCLICredential","text":"azr::Credential$is_interactive() azr::Credential$print() azr::Credential$validate()","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AzureCLICredential.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Azure CLI credential authentication — AzureCLICredential","text":"AzureCLICredential$new() AzureCLICredential$get_token() AzureCLICredential$req_auth() AzureCLICredential$clone()","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AzureCLICredential.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Azure CLI credential authentication — AzureCLICredential","text":"Create new Azure CLI credential","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AzureCLICredential.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Azure CLI credential authentication — AzureCLICredential","text":"","code":"AzureCLICredential$new(scope = NULL, tenant_id = NULL, process_timeout = NULL)"},{"path":"https://pedrobtz.github.io/azr/reference/AzureCLICredential.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Azure CLI credential authentication — AzureCLICredential","text":"scope character string specifying OAuth2 scope. Defaults NULL, uses scope set initialization. tenant_id character string specifying Azure Active Directory tenant ID. Defaults NULL, uses default tenant Azure CLI. process_timeout numeric value specifying timeout seconds Azure CLI process. Defaults 10.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AzureCLICredential.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Azure CLI credential authentication — AzureCLICredential","text":"new AzureCLICredential object","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AzureCLICredential.html","id":"method-get-token-","dir":"Reference","previous_headings":"","what":"Method get_token()","title":"Azure CLI credential authentication — AzureCLICredential","text":"Get access token Azure CLI","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AzureCLICredential.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Azure CLI credential authentication — AzureCLICredential","text":"","code":"AzureCLICredential$get_token(scope = NULL)"},{"path":"https://pedrobtz.github.io/azr/reference/AzureCLICredential.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Azure CLI credential authentication — AzureCLICredential","text":"scope character string specifying OAuth2 scope. NULL, uses scope specified initialization.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AzureCLICredential.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Azure CLI credential authentication — AzureCLICredential","text":"httr2::oauth_token() object containing access token","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AzureCLICredential.html","id":"method-req-auth-","dir":"Reference","previous_headings":"","what":"Method req_auth()","title":"Azure CLI credential authentication — AzureCLICredential","text":"Add authentication httr2 request","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AzureCLICredential.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Azure CLI credential authentication — AzureCLICredential","text":"","code":"AzureCLICredential$req_auth(req, scope = NULL)"},{"path":"https://pedrobtz.github.io/azr/reference/AzureCLICredential.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Azure CLI credential authentication — AzureCLICredential","text":"req httr2::request() object scope character string specifying OAuth2 scope. NULL, uses scope specified initialization.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AzureCLICredential.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Azure CLI credential authentication — AzureCLICredential","text":"request object authentication header added","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AzureCLICredential.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Azure CLI credential authentication — AzureCLICredential","text":"objects class cloneable method.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AzureCLICredential.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Azure CLI credential authentication — AzureCLICredential","text":"","code":"AzureCLICredential$clone(deep = FALSE)"},{"path":"https://pedrobtz.github.io/azr/reference/AzureCLICredential.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Azure CLI credential authentication — AzureCLICredential","text":"deep Whether make deep clone.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/AzureCLICredential.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Azure CLI credential authentication — AzureCLICredential","text":"","code":"# Create credential with default settings cred <- AzureCLICredential$new()  # Create credential with specific scope and tenant cred <- AzureCLICredential$new(   scope = \"https://management.azure.com/.default\",   tenant_id = \"your-tenant-id\" )  # To get a token or authenticate a request it is required that # 'az login' is successfully executed, otherwise it will return an error. if (FALSE) { # \\dontrun{ # Get an access token token <- cred$get_token()  # Use with httr2 request req <- httr2::request(\"https://management.azure.com/subscriptions\") resp <- httr2::req_perform(cred$req_auth(req)) } # }"},{"path":"https://pedrobtz.github.io/azr/reference/ClientSecretCredential.html","id":null,"dir":"Reference","previous_headings":"","what":"Client secret credential authentication — ClientSecretCredential","title":"Client secret credential authentication — ClientSecretCredential","text":"Authenticates service principal using client ID client secret. credential commonly used application authentication Azure.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/ClientSecretCredential.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Client secret credential authentication — ClientSecretCredential","text":"credential uses OAuth 2.0 client credentials flow obtain access tokens. requires registered Azure AD application client secret. client secret stored securely hard-coded scripts.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/ClientSecretCredential.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Client secret credential authentication — ClientSecretCredential","text":"azr::Credential -> ClientSecretCredential","code":""},{"path":"https://pedrobtz.github.io/azr/reference/ClientSecretCredential.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Client secret credential authentication — ClientSecretCredential","text":"azr::Credential$initialize() azr::Credential$is_interactive() azr::Credential$print()","code":""},{"path":"https://pedrobtz.github.io/azr/reference/ClientSecretCredential.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Client secret credential authentication — ClientSecretCredential","text":"ClientSecretCredential$validate() ClientSecretCredential$get_token() ClientSecretCredential$req_auth() ClientSecretCredential$clone()","code":""},{"path":"https://pedrobtz.github.io/azr/reference/ClientSecretCredential.html","id":"method-validate-","dir":"Reference","previous_headings":"","what":"Method validate()","title":"Client secret credential authentication — ClientSecretCredential","text":"Validate credential configuration","code":""},{"path":"https://pedrobtz.github.io/azr/reference/ClientSecretCredential.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Client secret credential authentication — ClientSecretCredential","text":"","code":"ClientSecretCredential$validate()"},{"path":"https://pedrobtz.github.io/azr/reference/ClientSecretCredential.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"Client secret credential authentication — ClientSecretCredential","text":"Checks client secret provided NA. Calls parent class validation method.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/ClientSecretCredential.html","id":"method-get-token-","dir":"Reference","previous_headings":"","what":"Method get_token()","title":"Client secret credential authentication — ClientSecretCredential","text":"Get access token using client credentials flow","code":""},{"path":"https://pedrobtz.github.io/azr/reference/ClientSecretCredential.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Client secret credential authentication — ClientSecretCredential","text":"","code":"ClientSecretCredential$get_token()"},{"path":"https://pedrobtz.github.io/azr/reference/ClientSecretCredential.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Client secret credential authentication — ClientSecretCredential","text":"httr2::oauth_token() object containing access token","code":""},{"path":"https://pedrobtz.github.io/azr/reference/ClientSecretCredential.html","id":"method-req-auth-","dir":"Reference","previous_headings":"","what":"Method req_auth()","title":"Client secret credential authentication — ClientSecretCredential","text":"Add OAuth client credentials authentication httr2 request","code":""},{"path":"https://pedrobtz.github.io/azr/reference/ClientSecretCredential.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Client secret credential authentication — ClientSecretCredential","text":"","code":"ClientSecretCredential$req_auth(req)"},{"path":"https://pedrobtz.github.io/azr/reference/ClientSecretCredential.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Client secret credential authentication — ClientSecretCredential","text":"req httr2::request() object","code":""},{"path":"https://pedrobtz.github.io/azr/reference/ClientSecretCredential.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Client secret credential authentication — ClientSecretCredential","text":"request object OAuth client credentials authentication configured","code":""},{"path":"https://pedrobtz.github.io/azr/reference/ClientSecretCredential.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Client secret credential authentication — ClientSecretCredential","text":"objects class cloneable method.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/ClientSecretCredential.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Client secret credential authentication — ClientSecretCredential","text":"","code":"ClientSecretCredential$clone(deep = FALSE)"},{"path":"https://pedrobtz.github.io/azr/reference/ClientSecretCredential.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Client secret credential authentication — ClientSecretCredential","text":"deep Whether make deep clone.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/ClientSecretCredential.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Client secret credential authentication — ClientSecretCredential","text":"","code":"# Create credential with client secret cred <- ClientSecretCredential$new(   tenant_id = \"your-tenant-id\",   client_id = \"your-client-id\",   client_secret = \"your-client-secret\",   scope = \"https://management.azure.com/.default\" )  # To get a token or authenticate a request it requires # valid 'client_id' and 'client_secret' credentials, # otherwise it will return an error. if (FALSE) { # \\dontrun{ # Get an access token token <- cred$get_token()  # Use with httr2 request req <- httr2::request(\"https://management.azure.com/subscriptions\") resp <- httr2::req_perform(cred$req_auth(req)) } # }"},{"path":"https://pedrobtz.github.io/azr/reference/DeviceCodeCredential.html","id":null,"dir":"Reference","previous_headings":"","what":"Device code credential authentication — DeviceCodeCredential","title":"Device code credential authentication — DeviceCodeCredential","text":"Authenticates user device code flow. flow designed devices web browser input constraints.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/DeviceCodeCredential.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Device code credential authentication — DeviceCodeCredential","text":"device code flow displays code user must enter another device web browser complete authentication. ideal CLI applications, headless servers, devices without browser. credential supports token caching avoid repeated authentication. Tokens can cached disk memory.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/DeviceCodeCredential.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Device code credential authentication — DeviceCodeCredential","text":"azr::Credential -> azr::InteractiveCredential -> DeviceCodeCredential","code":""},{"path":"https://pedrobtz.github.io/azr/reference/DeviceCodeCredential.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Device code credential authentication — DeviceCodeCredential","text":"azr::Credential$print() azr::Credential$validate() azr::InteractiveCredential$is_interactive()","code":""},{"path":"https://pedrobtz.github.io/azr/reference/DeviceCodeCredential.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Device code credential authentication — DeviceCodeCredential","text":"DeviceCodeCredential$new() DeviceCodeCredential$get_token() DeviceCodeCredential$req_auth() DeviceCodeCredential$clone()","code":""},{"path":"https://pedrobtz.github.io/azr/reference/DeviceCodeCredential.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Device code credential authentication — DeviceCodeCredential","text":"Create new device code credential","code":""},{"path":"https://pedrobtz.github.io/azr/reference/DeviceCodeCredential.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Device code credential authentication — DeviceCodeCredential","text":"","code":"DeviceCodeCredential$new(   scope = NULL,   tenant_id = NULL,   client_id = NULL,   use_cache = \"disk\",   offline = TRUE )"},{"path":"https://pedrobtz.github.io/azr/reference/DeviceCodeCredential.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Device code credential authentication — DeviceCodeCredential","text":"scope character string specifying OAuth2 scope. Defaults NULL. tenant_id character string specifying Azure Active Directory tenant ID. Defaults NULL. client_id character string specifying application (client) ID. Defaults NULL. use_cache character string specifying cache type. Use \"disk\" disk-based caching \"memory\" -memory caching. Defaults \"disk\". offline logical value indicating whether request offline access (refresh tokens). Defaults TRUE.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/DeviceCodeCredential.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Device code credential authentication — DeviceCodeCredential","text":"new DeviceCodeCredential object","code":""},{"path":"https://pedrobtz.github.io/azr/reference/DeviceCodeCredential.html","id":"method-get-token-","dir":"Reference","previous_headings":"","what":"Method get_token()","title":"Device code credential authentication — DeviceCodeCredential","text":"Get access token using device code flow","code":""},{"path":"https://pedrobtz.github.io/azr/reference/DeviceCodeCredential.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Device code credential authentication — DeviceCodeCredential","text":"","code":"DeviceCodeCredential$get_token(reauth = FALSE)"},{"path":"https://pedrobtz.github.io/azr/reference/DeviceCodeCredential.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Device code credential authentication — DeviceCodeCredential","text":"reauth logical value indicating whether force reauthentication. Defaults FALSE.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/DeviceCodeCredential.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Device code credential authentication — DeviceCodeCredential","text":"httr2::oauth_token() object containing access token","code":""},{"path":"https://pedrobtz.github.io/azr/reference/DeviceCodeCredential.html","id":"method-req-auth-","dir":"Reference","previous_headings":"","what":"Method req_auth()","title":"Device code credential authentication — DeviceCodeCredential","text":"Add OAuth device code authentication httr2 request","code":""},{"path":"https://pedrobtz.github.io/azr/reference/DeviceCodeCredential.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Device code credential authentication — DeviceCodeCredential","text":"","code":"DeviceCodeCredential$req_auth(req)"},{"path":"https://pedrobtz.github.io/azr/reference/DeviceCodeCredential.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Device code credential authentication — DeviceCodeCredential","text":"req httr2::request() object","code":""},{"path":"https://pedrobtz.github.io/azr/reference/DeviceCodeCredential.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Device code credential authentication — DeviceCodeCredential","text":"request object OAuth device code authentication configured","code":""},{"path":"https://pedrobtz.github.io/azr/reference/DeviceCodeCredential.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Device code credential authentication — DeviceCodeCredential","text":"objects class cloneable method.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/DeviceCodeCredential.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Device code credential authentication — DeviceCodeCredential","text":"","code":"DeviceCodeCredential$clone(deep = FALSE)"},{"path":"https://pedrobtz.github.io/azr/reference/DeviceCodeCredential.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Device code credential authentication — DeviceCodeCredential","text":"deep Whether make deep clone.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/DeviceCodeCredential.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Device code credential authentication — DeviceCodeCredential","text":"","code":"# DeviceCodeCredential requires an interactive session if (FALSE) { # \\dontrun{ # Create credential with default settings cred <- DeviceCodeCredential$new()  # Get an access token (will prompt for 'device code' flow) token <- cred$get_token()  # Force re-authentication token <- cred$get_token(reauth = TRUE)  # Use with httr2 request req <- httr2::request(\"https://management.azure.com/subscriptions\") req <- cred$req_auth(req) } # }"},{"path":"https://pedrobtz.github.io/azr/reference/InteractiveCredential.html","id":null,"dir":"Reference","previous_headings":"","what":"Interactive credential base class — InteractiveCredential","title":"Interactive credential base class — InteractiveCredential","text":"Base class interactive authentication credentials. class instantiated directly; use DeviceCodeCredential AuthCodeCredential instead.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/InteractiveCredential.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Interactive credential base class — InteractiveCredential","text":"azr::Credential -> InteractiveCredential","code":""},{"path":"https://pedrobtz.github.io/azr/reference/InteractiveCredential.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Interactive credential base class — InteractiveCredential","text":"azr::Credential$initialize() azr::Credential$print() azr::Credential$validate()","code":""},{"path":"https://pedrobtz.github.io/azr/reference/InteractiveCredential.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Interactive credential base class — InteractiveCredential","text":"InteractiveCredential$is_interactive() InteractiveCredential$clone()","code":""},{"path":"https://pedrobtz.github.io/azr/reference/InteractiveCredential.html","id":"method-is-interactive-","dir":"Reference","previous_headings":"","what":"Method is_interactive()","title":"Interactive credential base class — InteractiveCredential","text":"Check credential interactive","code":""},{"path":"https://pedrobtz.github.io/azr/reference/InteractiveCredential.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interactive credential base class — InteractiveCredential","text":"","code":"InteractiveCredential$is_interactive()"},{"path":"https://pedrobtz.github.io/azr/reference/InteractiveCredential.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Interactive credential base class — InteractiveCredential","text":"Always returns TRUE interactive credentials","code":""},{"path":"https://pedrobtz.github.io/azr/reference/InteractiveCredential.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Interactive credential base class — InteractiveCredential","text":"objects class cloneable method.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/InteractiveCredential.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Interactive credential base class — InteractiveCredential","text":"","code":"InteractiveCredential$clone(deep = FALSE)"},{"path":"https://pedrobtz.github.io/azr/reference/InteractiveCredential.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interactive credential base class — InteractiveCredential","text":"deep Whether make deep clone.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/azr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"azr: Credential Chain for Seamless 'OAuth 2.0' Authentication to 'Azure Services' — azr-package","title":"azr: Credential Chain for Seamless 'OAuth 2.0' Authentication to 'Azure Services' — azr-package","text":"Implements credential chain 'Azure OAuth 2.0' authentication based package 'httr2”s 'OAuth' framework. Sequentially attempts authentication methods one succeeds. development allows interactive browser-based flows ('Device Code' 'Auth Code' flows) non-interactive flow ('Client Secret') batch mode.","code":""},{"path":[]},{"path":"https://pedrobtz.github.io/azr/reference/azr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"azr: Credential Chain for Seamless 'OAuth 2.0' Authentication to 'Azure Services' — azr-package","text":"Maintainer: Pedro Baltazar pedrobtz@gmail.com","code":""},{"path":"https://pedrobtz.github.io/azr/reference/azure_authority_hosts.html","id":null,"dir":"Reference","previous_headings":"","what":"Azure Authority Host URLs — azure_authority_hosts","title":"Azure Authority Host URLs — azure_authority_hosts","text":"Login endpoint URLs different Azure cloud environments.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/azure_authority_hosts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Azure Authority Host URLs — azure_authority_hosts","text":"","code":"azure_authority_hosts"},{"path":"https://pedrobtz.github.io/azr/reference/azure_authority_hosts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Azure Authority Host URLs — azure_authority_hosts","text":"object class list length 3.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/azure_client.html","id":null,"dir":"Reference","previous_headings":"","what":"Azure Default Client Configuration — azure_client","title":"Azure Default Client Configuration — azure_client","text":"Default client ID tenant ID used Azure authentication explicitly provided. client ID Microsoft's public Azure CLI client ID.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/azure_client.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Azure Default Client Configuration — azure_client","text":"","code":"azure_client"},{"path":"https://pedrobtz.github.io/azr/reference/azure_client.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Azure Default Client Configuration — azure_client","text":"object class list length 2.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/azure_scopes.html","id":null,"dir":"Reference","previous_headings":"","what":"Common Azure OAuth Scopes — azure_scopes","title":"Common Azure OAuth Scopes — azure_scopes","text":"Predefined OAuth scopes common Azure services.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/azure_scopes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common Azure OAuth Scopes — azure_scopes","text":"","code":"azure_scopes"},{"path":"https://pedrobtz.github.io/azr/reference/azure_scopes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Common Azure OAuth Scopes — azure_scopes","text":"object class list length 4.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/default_azure_client_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Get default Azure client ID — default_azure_client_id","title":"Get default Azure client ID — default_azure_client_id","text":"Retrieves Azure client ID AZURE_CLIENT_ID environment variable, falls back default Azure CLI client ID set.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/default_azure_client_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get default Azure client ID — default_azure_client_id","text":"","code":"default_azure_client_id()"},{"path":"https://pedrobtz.github.io/azr/reference/default_azure_client_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get default Azure client ID — default_azure_client_id","text":"character string client ID","code":""},{"path":"https://pedrobtz.github.io/azr/reference/default_azure_client_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get default Azure client ID — default_azure_client_id","text":"","code":"default_azure_client_id() #> [1] \"04b07795-8ddb-461a-bbee-02f9e1bf7b46\""},{"path":"https://pedrobtz.github.io/azr/reference/default_azure_client_secret.html","id":null,"dir":"Reference","previous_headings":"","what":"Get default Azure client secret — default_azure_client_secret","title":"Get default Azure client secret — default_azure_client_secret","text":"Retrieves Azure client secret AZURE_CLIENT_SECRET environment variable, returns NA_character_ set.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/default_azure_client_secret.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get default Azure client secret — default_azure_client_secret","text":"","code":"default_azure_client_secret()"},{"path":"https://pedrobtz.github.io/azr/reference/default_azure_client_secret.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get default Azure client secret — default_azure_client_secret","text":"character string client secret, NA_character_ set","code":""},{"path":"https://pedrobtz.github.io/azr/reference/default_azure_client_secret.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get default Azure client secret — default_azure_client_secret","text":"","code":"default_azure_client_secret() #> [1] NA"},{"path":"https://pedrobtz.github.io/azr/reference/default_azure_host.html","id":null,"dir":"Reference","previous_headings":"","what":"Get default Azure authority host — default_azure_host","title":"Get default Azure authority host — default_azure_host","text":"Retrieves Azure authority host AZURE_AUTHORITY_HOST environment variable, falls back Azure Public Cloud set.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/default_azure_host.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get default Azure authority host — default_azure_host","text":"","code":"default_azure_host()"},{"path":"https://pedrobtz.github.io/azr/reference/default_azure_host.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get default Azure authority host — default_azure_host","text":"character string authority host URL","code":""},{"path":"https://pedrobtz.github.io/azr/reference/default_azure_host.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get default Azure authority host — default_azure_host","text":"","code":"default_azure_host() #> [1] \"login.microsoftonline.com\""},{"path":"https://pedrobtz.github.io/azr/reference/default_azure_oauth_client.html","id":null,"dir":"Reference","previous_headings":"","what":"Create default Azure OAuth client — default_azure_oauth_client","title":"Create default Azure OAuth client — default_azure_oauth_client","text":"Creates httr2::oauth_client() configured Azure authentication.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/default_azure_oauth_client.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create default Azure OAuth client — default_azure_oauth_client","text":"","code":"default_azure_oauth_client(   client_id = default_azure_client_id(),   client_secret = NULL,   name = NULL )"},{"path":"https://pedrobtz.github.io/azr/reference/default_azure_oauth_client.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create default Azure OAuth client — default_azure_oauth_client","text":"client_id character string specifying client ID. Defaults default_azure_client_id(). client_secret character string specifying client secret. Defaults NULL. name character string specifying client name. Defaults NULL.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/default_azure_oauth_client.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create default Azure OAuth client — default_azure_oauth_client","text":"httr2::oauth_client() object","code":""},{"path":"https://pedrobtz.github.io/azr/reference/default_azure_oauth_client.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create default Azure OAuth client — default_azure_oauth_client","text":"","code":"client <- default_azure_oauth_client() client <- default_azure_oauth_client(   client_id = \"my-client-id\",   client_secret = \"my-secret\" )"},{"path":"https://pedrobtz.github.io/azr/reference/default_azure_scope.html","id":null,"dir":"Reference","previous_headings":"","what":"Get default Azure OAuth scope — default_azure_scope","title":"Get default Azure OAuth scope — default_azure_scope","text":"Returns default OAuth scope specified Azure resource.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/default_azure_scope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get default Azure OAuth scope — default_azure_scope","text":"","code":"default_azure_scope(resource = \"azure_arm\")"},{"path":"https://pedrobtz.github.io/azr/reference/default_azure_scope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get default Azure OAuth scope — default_azure_scope","text":"resource character string specifying Azure resource. Must one : \"azure_arm\" (Azure Resource Manager), \"azure_graph\" (Microsoft Graph), \"azure_storage\" (Azure Storage), \"azure_key_vault\" (Azure Key Vault). Defaults \"azure_arm\".","code":""},{"path":"https://pedrobtz.github.io/azr/reference/default_azure_scope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get default Azure OAuth scope — default_azure_scope","text":"character string OAuth scope URL","code":""},{"path":"https://pedrobtz.github.io/azr/reference/default_azure_scope.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get default Azure OAuth scope — default_azure_scope","text":"","code":"default_azure_scope() #> [1] \"https://management.azure.com/.default\" default_azure_scope(\"azure_graph\") #> [1] \"https://graph.microsoft.com/.default\""},{"path":"https://pedrobtz.github.io/azr/reference/default_azure_tenant_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Get default Azure tenant ID — default_azure_tenant_id","title":"Get default Azure tenant ID — default_azure_tenant_id","text":"Retrieves Azure tenant ID AZURE_TENANT_ID environment variable, falls back default value set.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/default_azure_tenant_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get default Azure tenant ID — default_azure_tenant_id","text":"","code":"default_azure_tenant_id()"},{"path":"https://pedrobtz.github.io/azr/reference/default_azure_tenant_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get default Azure tenant ID — default_azure_tenant_id","text":"character string tenant ID","code":""},{"path":"https://pedrobtz.github.io/azr/reference/default_azure_tenant_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get default Azure tenant ID — default_azure_tenant_id","text":"","code":"default_azure_tenant_id() #> [1] \"common\""},{"path":"https://pedrobtz.github.io/azr/reference/default_azure_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Get default Azure OAuth URLs — default_azure_url","title":"Get default Azure OAuth URLs — default_azure_url","text":"Constructs Azure OAuth 2.0 endpoint URLs given tenant authority host.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/default_azure_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get default Azure OAuth URLs — default_azure_url","text":"","code":"default_azure_url(   endpoint = NULL,   oauth_host = default_azure_host(),   tenant_id = default_azure_tenant_id() )"},{"path":"https://pedrobtz.github.io/azr/reference/default_azure_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get default Azure OAuth URLs — default_azure_url","text":"endpoint character string specifying endpoint URL return. Must one : \"authorize\", \"token\", \"devicecode\". NULL (default), returns list endpoint URLs. oauth_host character string specifying Azure authority host. Defaults default_azure_host(). tenant_id character string specifying tenant ID. Defaults default_azure_tenant_id().","code":""},{"path":"https://pedrobtz.github.io/azr/reference/default_azure_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get default Azure OAuth URLs — default_azure_url","text":"endpoint specified, returns character string URL. endpoint NULL, returns named list endpoint URLs.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/default_azure_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get default Azure OAuth URLs — default_azure_url","text":"","code":"# Get all URLs default_azure_url() #> $authorize #> [1] \"https://login.microsoftonline.com/common/oauth2/v2.0/authorize\" #>  #> $token #> [1] \"https://login.microsoftonline.com/common/oauth2/v2.0/token\" #>  #> $devicecode #> [1] \"https://login.microsoftonline.com/common/oauth2/v2.0/devicecode\" #>   # Get specific endpoint default_azure_url(\"token\") #> [1] \"https://login.microsoftonline.com/common/oauth2/v2.0/token\"  # Custom tenant default_azure_url(\"authorize\", tenant_id = \"my-tenant-id\") #> [1] \"https://login.microsoftonline.com/my-tenant-id/oauth2/v2.0/authorize\""},{"path":"https://pedrobtz.github.io/azr/reference/default_redirect_uri.html","id":null,"dir":"Reference","previous_headings":"","what":"Get default OAuth redirect URI — default_redirect_uri","title":"Get default OAuth redirect URI — default_redirect_uri","text":"Constructs redirect URI OAuth flows. provided URI port, assigns random port using httpuv::randomPort().","code":""},{"path":"https://pedrobtz.github.io/azr/reference/default_redirect_uri.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get default OAuth redirect URI — default_redirect_uri","text":"","code":"default_redirect_uri(redirect_uri = httr2::oauth_redirect_uri())"},{"path":"https://pedrobtz.github.io/azr/reference/default_redirect_uri.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get default OAuth redirect URI — default_redirect_uri","text":"redirect_uri character string specifying redirect URI. Defaults httr2::oauth_redirect_uri().","code":""},{"path":"https://pedrobtz.github.io/azr/reference/default_redirect_uri.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get default OAuth redirect URI — default_redirect_uri","text":"character string redirect URI","code":""},{"path":"https://pedrobtz.github.io/azr/reference/default_redirect_uri.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get default OAuth redirect URI — default_redirect_uri","text":"","code":"default_redirect_uri() #> [1] \"http://localhost:35782/\""},{"path":"https://pedrobtz.github.io/azr/reference/environment_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Azure Environment Variable Names — environment_variables","title":"Azure Environment Variable Names — environment_variables","text":"Standard environment variable names used Azure credential discovery.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/environment_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Azure Environment Variable Names — environment_variables","text":"","code":"environment_variables"},{"path":"https://pedrobtz.github.io/azr/reference/environment_variables.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Azure Environment Variable Names — environment_variables","text":"object class list length 9.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/get_request_authorizer.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Default Request Authorizer Function — get_request_authorizer","title":"Get Default Request Authorizer Function — get_request_authorizer","text":"Creates request authorizer function retrieves authentication credentials returns callable request authorization method. function handles credential discovery process returns request authentication method discovered credential object.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/get_request_authorizer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Default Request Authorizer Function — get_request_authorizer","text":"","code":"get_request_authorizer(   scope = NULL,   tenant_id = NULL,   client_id = NULL,   client_secret = NULL,   use_cache = \"disk\",   offline = FALSE,   .chain = default_credential_chain(),   .verbose = FALSE )"},{"path":"https://pedrobtz.github.io/azr/reference/get_request_authorizer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Default Request Authorizer Function — get_request_authorizer","text":"scope Optional character string specifying authentication scope. tenant_id Optional character string specifying tenant ID authentication. client_id Optional character string specifying client ID authentication. client_secret Optional character string specifying client secret authentication. use_cache Character string indicating caching strategy. Defaults \"disk\". Options include \"disk\" disk-based caching \"memory\" -memory caching. offline Logical. TRUE, operates offline mode. Defaults FALSE. .chain list credential objects, element must inherit Credential base class. Credentials attempted order provided get_token succeeds. .verbose Logical. TRUE, prints detailed diagnostic information credential discovery authentication. Defaults FALSE.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/get_request_authorizer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Default Request Authorizer Function — get_request_authorizer","text":"function authorizes HTTP requests appropriate credentials called.","code":""},{"path":[]},{"path":"https://pedrobtz.github.io/azr/reference/get_request_authorizer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Default Request Authorizer Function — get_request_authorizer","text":"","code":"# In non-interactive sessions, this function will return an error if the # environment is not setup with valid credentials. And in an interactive session # the user will be prompted to attempt one of the interactive authentication flows. if (FALSE) { # \\dontrun{ req_auth <- get_request_authorizer(   scope = \"https://graph.microsoft.com/.default\" ) req <- req_auth(httr2::request(\"https://graph.microsoft.com/v1.0/me\")) } # }"},{"path":"https://pedrobtz.github.io/azr/reference/get_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Authentication Token — get_token","title":"Get Authentication Token — get_token","text":"Retrieves authentication token using default token provider. convenience function combines credential discovery token acquisition single step.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/get_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Authentication Token — get_token","text":"","code":"get_token(   scope = NULL,   tenant_id = NULL,   client_id = NULL,   client_secret = NULL,   use_cache = \"disk\",   offline = FALSE,   .chain = default_credential_chain(),   .verbose = FALSE )"},{"path":"https://pedrobtz.github.io/azr/reference/get_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Authentication Token — get_token","text":"scope Optional character string specifying authentication scope. tenant_id Optional character string specifying tenant ID authentication. client_id Optional character string specifying client ID authentication. client_secret Optional character string specifying client secret authentication. use_cache Character string indicating caching strategy. Defaults \"disk\". Options include \"disk\" disk-based caching \"memory\" -memory caching. offline Logical. TRUE, operates offline mode. Defaults FALSE. .chain list credential objects, element must inherit Credential base class. Credentials attempted order provided get_token succeeds. .verbose Logical. TRUE, prints detailed diagnostic information credential discovery authentication. Defaults FALSE.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/get_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Authentication Token — get_token","text":"httr2::oauth_token() object.","code":""},{"path":[]},{"path":"https://pedrobtz.github.io/azr/reference/get_token.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Authentication Token — get_token","text":"","code":"# In non-interactive sessions, this function will return an error if the # environment is not setup with valid credentials. And in an interactive session # the user will be prompted to attempt one of the interactive authentication flows. if (FALSE) { # \\dontrun{ token <- get_token(   scope = \"https://graph.microsoft.com/.default\",   tenant_id = \"my-tenant-id\",   client_id = \"my-client-id\",   client_secret = \"my-secret\" ) } # }"},{"path":"https://pedrobtz.github.io/azr/reference/get_token_provider.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Default Token Provider Function — get_token_provider","title":"Get Default Token Provider Function — get_token_provider","text":"Creates token provider function retrieves authentication credentials returns callable token getter. function handles credential discovery process returns token acquisition method discovered credential object.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/get_token_provider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Default Token Provider Function — get_token_provider","text":"","code":"get_token_provider(   scope = NULL,   tenant_id = NULL,   client_id = NULL,   client_secret = NULL,   use_cache = \"disk\",   offline = FALSE,   .chain = default_credential_chain(),   .verbose = FALSE )"},{"path":"https://pedrobtz.github.io/azr/reference/get_token_provider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Default Token Provider Function — get_token_provider","text":"scope Optional character string specifying authentication scope. tenant_id Optional character string specifying tenant ID authentication. client_id Optional character string specifying client ID authentication. client_secret Optional character string specifying client secret authentication. use_cache Character string indicating caching strategy. Defaults \"disk\". Options include \"disk\" disk-based caching \"memory\" -memory caching. offline Logical. TRUE, operates offline mode. Defaults FALSE. .chain list credential objects, element must inherit Credential base class. Credentials attempted order provided get_token succeeds. .verbose Logical. TRUE, prints detailed diagnostic information credential discovery authentication. Defaults FALSE.","code":""},{"path":"https://pedrobtz.github.io/azr/reference/get_token_provider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Default Token Provider Function — get_token_provider","text":"function retrieves returns authentication token called.","code":""},{"path":[]},{"path":"https://pedrobtz.github.io/azr/reference/get_token_provider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Default Token Provider Function — get_token_provider","text":"","code":"# In non-interactive sessions, this function will return an error if the # environment is not set up with valid credentials. In an interactive session # the user will be prompted to attempt one of the interactive authentication flows. if (FALSE) { # \\dontrun{ token_provider <- get_token_provider(   scope = \"https://graph.microsoft.com/.default\",   tenant_id = \"my-tenant-id\",   client_id = \"my-client-id\",   client_secret = \"my-secret\" ) token <- token_provider() } # }"},{"path":"https://pedrobtz.github.io/azr/news/index.html","id":"azr-010","dir":"Changelog","previous_headings":"","what":"azr 0.1.0","title":"azr 0.1.0","text":"Initial CRAN submission.","code":""}]
